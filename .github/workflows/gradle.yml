name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build
      - name: Upload JAR to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar # Pfad zum erstellten JAR

  test:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run Tests
        run: ./gradlew test

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write # Erforderlich, um Release-Assets hochzuladen

    steps:
      - uses: actions/checkout@v4
      - name: Download JAR from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: ./ # Herunterladen des JARs
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}" # Automatische Tag-Benennung
          release_name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false
          files: "*.jar" # Hochladen des JARs

  deploy:
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Fly.io CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "$HOME/.fly/bin" >> $GITHUB_PATH

      - name: Verify Fly.io CLI Installation
        run: flyctl version # Dieser Schritt pr√ºft, ob flyctl korrekt installiert wurde

      - name: Authenticate with Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl auth login $FLY_API_TOKEN

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only